openapi: 3.0.1
info:
  title: Node.js Authentication API
  description: A simple API for user authentication and authorization built with Node.js, providing endpoints for user registration, login, password management, and more.
  termsOfService: https://termsOfService.blog.com
  contact:
    name: Omar
    url: https://contact.omar.com
    email: omar@gmail.com
  license:
    name: MIT
    url: https://license.blog.com
  version: 1.0.0
servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://production.com
    description: Production server
tags:
  - name: Auth
    description: Endpoints related to user authentication and management
paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Register a new user to the system. The request body must include all required fields such as email, password, and user details.
      operationId: createARegister
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/Content-Type'
      requestBody:
        required: true
        description: Payload to register a new user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Indicates the status of the response (e.g., "success").
                    example: success
                  statusCode:
                    type: integer
                    description: HTTP status code for the response.
                    example: 201
                  message:
                    type: string
                    description: A descriptive message about the response.
                    example: User registered successfully.
                  data:
                    $ref: '#/components/schemas/User'
                required:
                  - status
                  - statusCode
                  - message
                  - data
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/login:
    post:
      summary: Login a user
      description: 'Log in a user to the system. The request body must include the required fields: email and password.'
      operationId: loginUser
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/Content-Type'
      requestBody:
        required: true
        description: Payload to login the user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: User logged in successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Indicates the status of the response (e.g., "success").
                    example: success
                  statusCode:
                    type: integer
                    description: HTTP status code for the response.
                    example: 200
                  message:
                    type: string
                    description: A descriptive message about the response.
                    example: User logged in successfully.
                  data:
                    all of:
                      type: object
                      description: The user data.
                      properties:
                        $ref: ../../components/schemas.yaml#/User
                      $ref: ../../components/schemas.yaml#/Timestamp
                required:
                  - status
                  - statusCode
                  - message
                  - data
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/logout:
    post:
      summary: Log out a user
      description: Logs out the user by invalidating the provided refresh token. This action will also revoke any active sessions associated with the token.
      operationId: logoutUser
      security:
        - bearerAuth: []
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/Content-Type'
      requestBody:
        required: true
        description: Payload to log out the user by providing the refresh token.
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: The refresh token to invalidate.
                  example: eyJhbGciOiJIUzI1NiIsInR...
              required:
                - refreshToken
      responses:
        '204':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Indicates the status of the response (e.g., "success").
                    example: success
                  statusCode:
                    type: integer
                    description: HTTP status code for the response.
                    example: 204
                  message:
                    type: string
                    description: A descriptive message about the response.
                    example: User logged out successfully.
                required:
                  - status
                  - statusCode
                  - message
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/forgot-password:
    post:
      summary: Request a password reset
      description: Sends a password reset link to the user’s email address. The user must provide their registered email to receive the link.
      operationId: forgotPassword
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/Content-Type'
      requestBody:
        required: true
        description: Payload to initiate password reset.
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The email address associated with the user account.
                  example: user@example.com
              required:
                - email
      responses:
        '200':
          description: Password reset link sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Indicates the status of the response (e.g., "success").
                    example: success
                  statusCode:
                    type: integer
                    description: HTTP status code for the response.
                    example: 200
                  message:
                    type: string
                    description: A descriptive message about the response.
                    example: Password reset link has been sent to your email.
                required:
                  - status
                  - statusCode
                  - message
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/rest-password:
    post:
      summary: Reset a user’s password
      description: Allows the user to reset their password using a password reset token. The user must provide the new password and the token received via email.
      operationId: resetPassword
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/Content-Type'
      requestBody:
        required: true
        description: Payload to reset the user’s password.
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The password reset token received via email.
                  example: abc123token456
                newPassword:
                  type: string
                  description: The new password to set for the user account.
                  example: NewP@ssw0rd!
              required:
                - token
                - newPassword
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Indicates the status of the response (e.g., "success").
                    example: success
                  statusCode:
                    type: integer
                    description: HTTP status code for the response.
                    example: 200
                  message:
                    type: string
                    description: A descriptive message about the response.
                    example: Your password has been reset successfully.
                required:
                  - status
                  - statusCode
                  - message
        '400':
          description: Invalid input or token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Indicates an error status.
                    example: error
                  statusCode:
                    type: integer
                    description: HTTP status code for the error.
                    example: 400
                  message:
                    type: string
                    description: A descriptive message about the error.
                    example: Invalid token or password does not meet criteria.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/change-password:
    post:
      summary: Change user password
      description: Allows the user to change their password. The request body must include the old password and the new password.
      operationId: changePassword
      tags:
        - Auth
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        description: Payload to change the user’s password.
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  description: The current password of the user.
                  example: OldP@ssw0rd!
                newPassword:
                  type: string
                  description: The new password for the user account.
                  example: NewP@ssw0rd!
              required:
                - oldPassword
                - newPassword
      responses:
        '200':
          description: Password changed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Indicates the status of the response (e.g., "success").
                    example: success
                  statusCode:
                    type: integer
                    description: HTTP status code for the response.
                    example: 200
                  message:
                    type: string
                    description: A descriptive message about the response.
                    example: Your password has been changed successfully.
                required:
                  - status
                  - statusCode
                  - message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    Register:
      type: object
      properties:
        name:
          type: string
          example: John
        email:
          type: string
          example: user@example.com
        password:
          type: string
          format: password
          example: P@ssw0rd!
        phoneNumber:
          type: string
          example: '+1234567890'
        role:
          type: string,
          default: user
          enum:
            - user
            - admin
          example: Customer
      required:
        - name
        - email
        - password
        - phoneNumber
    User:
      type: object
      properties:
        _id:
          type: string
          format: objectId
          example: 60c72b2f5f1b2c001f8d4e90
        name:
          type: string
          example: John
        email:
          type: string
          example: user@example.com
        password:
          type: string
          format: password
          example: P@ssw0rd!
        phoneNumber:
          type: string
          example: '+1234567890'
        role:
          type: string,
          default: user
          enum:
            - user
            - admin
          example: Customer
        isActive:
          type: boolean
          example: true
        passwordChangeAt:
          type: data
          example: null
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          description: The status of the response (e.g., "success" or "error").
          enum:
            - error
        code:
          type: integer
          description: The HTTP status code associated with the error.
        message:
          type: string
          description: A human-readable message explaining the error.
        errors:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: The field or path where the error occurred.
              message:
                type: string
                description: A specific message about the error at the given path.
      required:
        - status
        - code
        - message
    LoginUser:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          format: password
          example: P@ssw0rd!
      required:
        - email
        - password
    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          description: The status of the response (e.g., "success" or "error").
          enum:
            - error
        code:
          type: integer
          description: The HTTP status code associated with the error.
        message:
          type: string
          description: A human-readable message explaining the error.
        data:
          type: object
          nullable: true
          description: The response data; null in case of an error.
        pagination:
          type: object
          nullable: true
          description: Pagination information if applicable.
          properties:
            page:
              type: integer
              description: Current page number.
            totalPage:
              type: integer
              description: Total number of pages available.
            limit:
              type: integer
              description: Number of items per page.
            next:
              type: integer
              description: Next page number if available.
            prev:
              type: integer
              description: Previous page number if available.
            totalItem:
              type: integer
              description: Total number of items.
        links:
          type: object
          nullable: true
          description: Links for pagination and navigation.
          properties:
            self:
              type: string
              description: Link to the current resource.
            next:
              type: string
              nullable: true
              description: Link to the next resource.
            prev:
              type: string
              nullable: true
              description: Link to the previous resource.
      required:
        - status
        - code
        - message
    Pagination:
      type: object
      nullable: true
      description: Pagination information if applicable.
      properties:
        page:
          type: integer
          description: Current page number.
          default: 1
        totalPage:
          type: integer
          description: Total number of pages available.
          default: 100
        limit:
          type: integer
          description: Number of items per page.
          default: 10
        next:
          type: integer
          description: Next page number if available.
          default: 2
        prev:
          type: integer
          description: Previous page number if available.
          default: null
        totalItem:
          type: integer
          description: Total number of items.
          default: 1000
      required:
        - page
        - totalPage
        - limit
        - next
        - prev
        - totalItem
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          example: '2023-10-30T14:30:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-10-30T15:00:00Z'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    Content-Type:
      name: Content-Type
      in: header
      description: The media type of the resource.
      required: true
      schema:
        type: string
        enum:
          - application/json
          - multipart/form-data
        example: application/json
    Authorization:
      name: Authorization
      in: header
      description: Bearer token for authentication.
      required: true
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
  responses:
    BadRequest:
      description: Your request contains invalid or malformed data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: fail
            statusCode: 400
            message: Invalid request data
            errors:
              - path: parameter
                message: Required parameter is missing or invalid
    Conflict:
      description: There is a conflict with the current state of the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: error
            statusCode: 409
            message: Conflict with the current resource state
            errors:
              - path: resource
                message: The resource is in a conflicting state and cannot be processed
    InternalServerError:
      description: An unexpected error occurred on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: error
            statusCode: 500
            message: An internal server error occurred
            errors: []
    NotFound:
      description: The resource you are looking for could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: error
            statusCode: 404
            message: Resource not found
            errors:
              - path: resource
                message: The specified resource could not be located
    Unauthorized:
      description: Authentication is required to access this resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: error
            statusCode: 401
            message: Authentication required
            errors:
              - path: authorization
                message: Authentication token missing or invalid
